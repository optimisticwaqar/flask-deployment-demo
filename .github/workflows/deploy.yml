name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: docker.io

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest requests

    - name: Test application
      run: |
        python -c "import app; print('App imports successfully')"
        python -c "from app import app; client = app.test_client(); resp = client.get('/health'); print(f'Health check: {resp.status_code}')"

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/flask-deployment-demo
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_NUMBER=${{ github.run_number }}
          GIT_COMMIT=${{ github.sha }}

  deploy-staging:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: ${{ vars.DEPLOY_URL }}
    steps:
    - name: Deploy to Staging
      id: deploy
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        echo "Registry: ${{ vars.DOCKER_REGISTRY }}"
        echo "Simulating deployment to staging server..."
        sleep 5
        echo "âœ… Deployment to staging completed!"

    - name: Run staging tests
      run: |
        echo "ðŸ§ª Running staging environment tests..."
        echo "âœ… All staging tests passed!"

    - name: Notify staging deployment
      run: |
        echo "ðŸ“¢ Staging deployment successful!"
        echo "Environment: staging"
        echo "Version: ${{ github.sha }}"

  deploy-production:
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || 
        (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ vars.DEPLOY_URL }}
    steps:
    - name: Deploy to Production
      id: deploy
      run: |
        echo "ðŸš€ Deploying to production environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        echo "Registry: ${{ vars.DOCKER_REGISTRY }}"
        echo "Simulating deployment to production server..."
        sleep 10
        echo "âœ… Deployment to production completed!"

    - name: Run production smoke tests
      run: |
        echo "ðŸ§ª Running production smoke tests..."
        echo "âœ… All production tests passed!"

    - name: Notify production deployment
      run: |
        echo "ðŸ“¢ Production deployment successful!"
        echo "Environment: production"
        echo "Version: ${{ github.sha }}"